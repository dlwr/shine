---
export interface Props {
  locale: string;
}

const { locale } = Astro.props;

const languages = [
  { code: 'en', name: 'English' },
  { code: 'ja', name: '日本語' }
];

function getCurrentUrl(newLocale: string): string {
  if (typeof window !== 'undefined') {
    const url = new URL(window.location.href);
    url.searchParams.set('locale', newLocale);
    return url.toString();
  }
  return `?locale=${newLocale}`;
}
---

<div class="flex gap-2 my-4 justify-center">
  {languages.map(lang => (
    <a 
      href={getCurrentUrl(lang.code)}
      class={`px-4 py-2 border rounded text-sm no-underline transition-all duration-200 ${
        locale === lang.code 
          ? 'bg-blue-600 text-white border-blue-600 hover:bg-blue-700 hover:border-blue-700' 
          : 'text-gray-700 border-gray-300 hover:bg-gray-50 hover:border-gray-400'
      }`}
      data-locale={lang.code}
    >
      {lang.name}
    </a>
  ))}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const langOptions = document.querySelectorAll('[data-locale]');
    
    langOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.preventDefault();
        const newLocale = (e.target as HTMLElement).dataset.locale;
        if (newLocale) {
          const url = new URL(window.location.href);
          url.searchParams.set('locale', newLocale);
          window.location.href = url.toString();
        }
      });
    });
  });
</script>