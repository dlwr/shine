---
export interface Props {
  locale: string;
}

const { locale } = Astro.props;

const languages = [
  { code: 'en', name: 'English' },
  { code: 'ja', name: '日本語' }
];

function getCurrentUrl(newLocale: string): string {
  if (typeof window !== 'undefined') {
    const url = new URL(window.location.href);
    url.searchParams.set('locale', newLocale);
    return url.toString();
  }
  return `?locale=${newLocale}`;
}
---

<div class="language-selector">
  {languages.map(lang => (
    <a 
      href={getCurrentUrl(lang.code)}
      class={`lang-option ${locale === lang.code ? 'active' : ''}`}
      data-locale={lang.code}
    >
      {lang.name}
    </a>
  ))}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const langOptions = document.querySelectorAll('.lang-option');
    
    langOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        e.preventDefault();
        const newLocale = (e.target as HTMLElement).dataset.locale;
        if (newLocale) {
          const url = new URL(window.location.href);
          url.searchParams.set('locale', newLocale);
          window.location.href = url.toString();
        }
      });
    });
  });
</script>

<style>
  .language-selector {
    display: flex;
    gap: 0.5rem;
    margin: 1rem 0;
    justify-content: center;
  }

  .lang-option {
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    text-decoration: none;
    color: #333;
    transition: all 0.2s ease;
    font-size: 0.9rem;
  }

  .lang-option:hover {
    background-color: #f5f5f5;
    border-color: #bbb;
  }

  .lang-option.active {
    background-color: #3273dc;
    color: white;
    border-color: #3273dc;
  }

  .lang-option.active:hover {
    background-color: #2366c1;
    border-color: #2366c1;
  }
</style>