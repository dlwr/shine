---
export interface Props {
  locale: string;
}

const { locale } = Astro.props;

const translations = {
  en: {
    adminButton: "Admin",
    loginTitle: "Admin Login",
    passwordPlaceholder: "Enter password",
    loginButton: "Login",
    cancelButton: "Cancel",
    loginError: "Invalid password",
    logoutButton: "Logout"
  },
  ja: {
    adminButton: "管理者",
    loginTitle: "管理者ログイン",
    passwordPlaceholder: "パスワードを入力",
    loginButton: "ログイン",
    cancelButton: "キャンセル",
    loginError: "パスワードが正しくありません",
    logoutButton: "ログアウト"
  }
};

const t = translations[locale as keyof typeof translations] || translations.en;
---

<div class="admin-section">
  <button id="admin-button" class="admin-button">
    {t.adminButton}
  </button>
  
  <div id="login-modal" class="modal hidden">
    <div class="modal-content">
      <h2>{t.loginTitle}</h2>
      <form id="login-form">
        <input 
          type="password" 
          id="password-input" 
          placeholder={t.passwordPlaceholder}
          required
        />
        <div class="modal-actions">
          <button type="submit" class="primary-button">
            {t.loginButton}
          </button>
          <button type="button" id="cancel-button" class="secondary-button">
            {t.cancelButton}
          </button>
        </div>
      </form>
      <div id="error-message" class="error-message hidden">
        {t.loginError}
      </div>
    </div>
  </div>
</div>

<style>
  .admin-section {
    position: fixed;
    top: 1rem;
    right: 1rem;
    z-index: 1000;
  }

  .admin-button {
    padding: 0.5rem 1rem;
    background: #333;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
  }

  .admin-button:hover {
    background: #555;
  }

  .admin-button.logged-in {
    background: #2563eb;
  }

  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1001;
  }

  .modal.hidden {
    display: none;
  }

  .modal-content {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 400px;
  }

  .modal-content h2 {
    margin-bottom: 1.5rem;
    font-size: 1.5rem;
  }

  input[type="password"] {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    margin-bottom: 1rem;
  }

  .modal-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
  }

  .primary-button,
  .secondary-button {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
  }

  .primary-button {
    background: #2563eb;
    color: white;
  }

  .primary-button:hover {
    background: #1d4ed8;
  }

  .secondary-button {
    background: #e5e7eb;
    color: #374151;
  }

  .secondary-button:hover {
    background: #d1d5db;
  }

  .error-message {
    color: #dc2626;
    font-size: 0.875rem;
    margin-top: 1rem;
  }

  .error-message.hidden {
    display: none;
  }
</style>

<script>
  const API_URL = import.meta.env.PUBLIC_API_URL || 'http://localhost:8787';
  const adminButton = document.getElementById('admin-button')!;
  const loginModal = document.getElementById('login-modal')!;
  const loginForm = document.getElementById('login-form')!;
  const passwordInput = document.getElementById('password-input') as HTMLInputElement;
  const cancelButton = document.getElementById('cancel-button')!;
  const errorMessage = document.getElementById('error-message')!;

  // Check if already logged in
  const token = localStorage.getItem('adminToken');
  if (token) {
    adminButton.classList.add('logged-in');
    adminButton.textContent = document.documentElement.lang === 'ja' ? 'ログアウト' : 'Logout';
  }

  adminButton.addEventListener('click', () => {
    if (localStorage.getItem('adminToken')) {
      // Logout
      console.log('Logging out admin');
      localStorage.removeItem('adminToken');
      adminButton.classList.remove('logged-in');
      adminButton.textContent = document.documentElement.lang === 'ja' ? '管理者' : 'Admin';
      window.dispatchEvent(new Event('adminLogout'));
      console.log('Admin logout event dispatched');
      // Force page reload to ensure clean state
      setTimeout(() => window.location.reload(), 100);
    } else {
      // Show login modal
      loginModal.classList.remove('hidden');
      passwordInput.focus();
    }
  });

  cancelButton.addEventListener('click', () => {
    loginModal.classList.add('hidden');
    passwordInput.value = '';
    errorMessage.classList.add('hidden');
  });

  loginForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
      const response = await fetch(`${API_URL}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          password: passwordInput.value,
        }),
      });

      if (response.ok) {
        const { token } = await response.json() as { token: string };
        localStorage.setItem('adminToken', token);
        loginModal.classList.add('hidden');
        passwordInput.value = '';
        errorMessage.classList.add('hidden');
        adminButton.classList.add('logged-in');
        adminButton.textContent = document.documentElement.lang === 'ja' ? 'ログアウト' : 'Logout';
        
        // Dispatch event for other components
        window.dispatchEvent(new Event('adminLogin'));
      } else {
        errorMessage.classList.remove('hidden');
      }
    } catch (error) {
      console.error('Login error:', error);
      errorMessage.classList.remove('hidden');
    }
  });

  // Close modal on outside click
  loginModal.addEventListener('click', (e) => {
    if (e.target === loginModal) {
      loginModal.classList.add('hidden');
      passwordInput.value = '';
      errorMessage.classList.add('hidden');
    }
  });
</script>