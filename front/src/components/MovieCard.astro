---
interface Props {
  movie: {
    uid: string;
    title: string;
    year: number;
    posterUrl?: string;
    imdbUrl?: string;
    nominations?: Array<{
      uid: string;
      isWinner: boolean;
      specialMention?: string;
      category: {
        uid: string;
        name: string;
      };
      ceremony: {
        uid: string;
        number: number;
        year: number;
      };
      organization: {
        uid: string;
        name: string;
        shortName: string;
      };
    }>;
    articleLinks?: Array<{
      uid: string;
      url: string;
      title: string;
      description?: string;
      viewCount: number;
    }>;
  };
  locale?: string;
}

const { movie, locale = "en" } = Astro.props;

const labels = {
  en: {
    noPoster: "No Poster",
    winner: "Winner",
    nominee: "Nominee",
    edit: "Edit",
    relatedArticles: "Related Articles",
    addArticle: "Add Article",
  },
  ja: {
    noPoster: "ポスターなし",
    winner: "受賞",
    nominee: "ノミネート",
    edit: "編集",
    relatedArticles: "関連記事",
    addArticle: "記事を追加",
  },
};

const t = labels[locale as keyof typeof labels] || labels.en;

// Group nominations by organization and ceremony
const nominationsByOrg =
  movie.nominations?.reduce(
    (acc, nom) => {
      const orgKey = nom.organization.uid;
      if (!acc[orgKey]) {
        acc[orgKey] = {
          organization: nom.organization,
          ceremonies: {},
        };
      }

      const ceremonyKey = nom.ceremony.uid;
      if (!acc[orgKey].ceremonies[ceremonyKey]) {
        acc[orgKey].ceremonies[ceremonyKey] = {
          ceremony: nom.ceremony,
          nominations: [],
        };
      }

      acc[orgKey].ceremonies[ceremonyKey].nominations.push(nom);
      return acc;
    },
    {} as Record<string, any>
  ) || {};
---

<div class="movie-card-wrapper">
  <div class="movie-card">
    {
      movie.imdbUrl ? (
        <a
          href={movie.imdbUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="movie-main-link"
        >
          <div class="poster">
            {movie.posterUrl ? (
              <img src={movie.posterUrl} alt={`${movie.title} poster`} />
            ) : (
              <div class="no-poster">{t.noPoster}</div>
            )}
          </div>
          <div class="movie-info">
            <h3 class="title">{movie.title}</h3>
            <p class="year">{movie.year}</p>
            {movie.nominations && movie.nominations.length > 0 && (
              <div class="nominations">
                {Object.values(nominationsByOrg).map((orgData: any) => (
                  <div class="org-group">
                    <h4 class="org-name">
                      {orgData.organization.shortName ||
                        orgData.organization.name}
                    </h4>
                    {Object.values(orgData.ceremonies).map(
                      (ceremonyData: any) => (
                        <div class="ceremony-group">
                          <span class="ceremony-year">
                            {ceremonyData.ceremony.year}
                          </span>
                          <ul class="nomination-list">
                            {ceremonyData.nominations.map((nom: any) => (
                              <li class={nom.isWinner ? "winner" : "nominee"}>
                                <span class="category-name">
                                  {nom.category.name}
                                </span>
                                <span class="status">
                                  {nom.isWinner ? t.winner : t.nominee}
                                </span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </a>
      ) : (
        <div class="movie-main-content">
          <div class="poster">
            {movie.posterUrl ? (
              <img src={movie.posterUrl} alt={`${movie.title} poster`} />
            ) : (
              <div class="no-poster">{t.noPoster}</div>
            )}
          </div>
          <div class="movie-info">
            <h3 class="title">{movie.title}</h3>
            <p class="year">{movie.year}</p>
            {movie.nominations && movie.nominations.length > 0 && (
              <div class="nominations">
                {Object.values(nominationsByOrg).map((orgData: any) => (
                  <div class="org-group">
                    <h4 class="org-name">
                      {orgData.organization.shortName ||
                        orgData.organization.name}
                    </h4>
                    {Object.values(orgData.ceremonies).map(
                      (ceremonyData: any) => (
                        <div class="ceremony-group">
                          <span class="ceremony-year">
                            {ceremonyData.ceremony.year}
                          </span>
                          <ul class="nomination-list">
                            {ceremonyData.nominations.map((nom: any) => (
                              <li class={nom.isWinner ? "winner" : "nominee"}>
                                <span class="category-name">
                                  {nom.category.name}
                                </span>
                                <span class="status">
                                  {nom.isWinner ? t.winner : t.nominee}
                                </span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )
    }
    {
      movie.articleLinks && movie.articleLinks.length > 0 && (
        <div class="article-links">
          <h4 class="section-title">{t.relatedArticles}</h4>
          <ul class="article-list">
            {movie.articleLinks.map((article) => (
              <li>
                <a
                  href={article.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="article-link"
                  data-article-id={article.uid}
                >
                  <span class="article-title">{article.title}</span>
                </a>
              </li>
            ))}
          </ul>
        </div>
      )
    }
    <a href={`/movies/${movie.uid}`} class="add-article-link">
      + {t.addArticle}
    </a>
  </div>
  <button class="edit-button" data-movie-id={movie.uid} style="display: none;">
    {t.edit}
  </button>
</div>

<style>
  .movie-card-wrapper {
    position: relative;
    height: 100%;
  }

  .movie-card {
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
    background: white;
    height: 100%;
    display: flex;
    flex-direction: column;
    width: 100%;
  }

  .movie-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.25);
  }

  .movie-main-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .movie-main-content {
    display: block;
  }

  .poster {
    height: 450px;
    background: #f0f0f0;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .poster img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .no-poster {
    color: #999;
    font-size: 1.25rem;
  }

  .movie-info {
    padding: 24px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  .title {
    margin: 0 0 12px 0;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .year {
    margin: 0 0 16px 0;
    color: #666;
    font-size: 1.1rem;
  }

  .nominations {
    margin-top: auto;
    padding-top: 16px;
    border-top: 1px solid #eee;
  }

  .org-group {
    margin-bottom: 16px;
  }

  .org-group:last-child {
    margin-bottom: 0;
  }

  .org-name {
    font-size: 0.9rem;
    font-weight: 600;
    color: #333;
    margin: 0 0 8px 0;
  }

  .ceremony-group {
    margin-bottom: 8px;
  }

  .ceremony-year {
    font-size: 0.85rem;
    color: #666;
    font-weight: 500;
  }

  .nomination-list {
    list-style: none;
    padding: 0;
    margin: 4px 0 0 0;
  }

  .nomination-list li {
    font-size: 0.85rem;
    padding: 4px 0;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .category-name {
    color: #555;
  }

  .status {
    font-size: 0.75rem;
    padding: 2px 8px;
    border-radius: 4px;
    font-weight: 500;
    margin-left: 8px;
  }

  .winner .status {
    background: #ffd700;
    color: #333;
  }

  .nominee .status {
    background: #e3e3e3;
    color: #555;
  }

  .edit-button {
    position: absolute;
    top: 12px;
    right: 12px;
    background: rgba(37, 99, 235, 0.9);
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.2s ease;
    z-index: 10;
  }

  .edit-button:hover {
    background: rgba(29, 78, 216, 0.95);
  }

  .article-links {
    padding: 0 24px 8px 24px;
    border-top: 1px solid #eee;
  }

  .section-title {
    font-size: 0.9rem;
    font-weight: 600;
    color: #333;
    margin: 16px 0 12px 0;
  }

  .article-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .article-list li {
    margin-bottom: 6px;
  }

  .article-list li:last-child {
    margin-bottom: 0;
  }

  .article-link {
    display: block;
    padding: 6px 10px;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    text-decoration: none;
    color: inherit;
    transition: all 0.2s ease;
  }

  .article-link:hover {
    background: #f3f4f6;
    border-color: #d1d5db;
    transform: translateX(2px);
  }

  .article-title {
    font-size: 0.8rem;
    color: #374151;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    line-height: 1.4;
  }

  .add-article-link {
    display: inline-block;
    margin: 12px 24px 16px 24px;
    padding: 4px 8px;
    color: #6b7280;
    text-decoration: none;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 400;
    transition: all 0.2s ease;
    border: 1px solid transparent;
  }

  .add-article-link:hover {
    color: #374151;
    background: #f3f4f6;
    border-color: #e5e7eb;
  }

  @media (max-width: 768px) {
    .poster {
      height: 400px;
    }

    .movie-info {
      padding: 20px;
    }

    .title {
      font-size: 1.3rem;
    }
  }
</style>

<script
  define:vars={{
    apiUrl:
      Astro.locals?.runtime?.env?.API_URL ||
      import.meta.env.PUBLIC_API_URL ||
      "http://localhost:8787",
  }}
  is:inline
>
  // Set API URL globally
  window.API_URL = apiUrl;

  // Check if user is admin and show edit buttons
  document.addEventListener("DOMContentLoaded", () => {
    const adminToken = localStorage.getItem("adminToken");

    if (adminToken) {
      // Show all edit buttons for admin users
      const editButtons = document.querySelectorAll(".edit-button");
      editButtons.forEach((button) => {
        button.style.display = "block";
      });

      // Add click event listeners
      editButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          e.stopPropagation();
          const movieId = button.getAttribute("data-movie-id");
          if (movieId) {
            window.location.href = `/edit/${movieId}`;
          }
        });
      });
    }

    // Track article link clicks using event delegation to prevent duplicate handlers
    const movieCard = document.currentScript.closest('.movie-card-wrapper');
    if (movieCard) {
      movieCard.addEventListener("click", async (e) => {
        const link = e.target.closest(".article-link");
        if (link && link.dataset.articleId) {
          // Send view count increment request (fire and forget)
          const apiUrl = window.API_URL || "http://localhost:8787";
          fetch(`${apiUrl}/article-links/${link.dataset.articleId}/view`, {
            method: "POST",
          }).catch(() => {
            // Ignore errors - don't block navigation
          });
        }
      });
    }
  });
</script>
