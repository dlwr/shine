---
interface Props {
  movie: {
    uid: string;
    title: string;
    year: number;
    posterUrl?: string;
    imdbUrl?: string;
    nominations?: Array<{
      uid: string;
      isWinner: boolean;
      specialMention?: string;
      category: {
        uid: string;
        name: string;
      };
      ceremony: {
        uid: string;
        number: number;
        year: number;
      };
      organization: {
        uid: string;
        name: string;
        shortName: string;
      };
    }>;
    articleLinks?: Array<{
      uid: string;
      url: string;
      title: string;
      description?: string;
    }>;
  };
  locale?: string;
}

const { movie, locale = "en" } = Astro.props;

const labels = {
  en: {
    noPoster: "No Poster",
    winner: "Winner",
    nominee: "Nominee",
    edit: "Edit",
    relatedArticles: "Submitted Links",
    addArticle: "Add Link",
    showMore: "Show details",
    showLess: "Hide details",
    watchOn: "Watch on",
    searchOn: "Search on",
  },
  ja: {
    noPoster: "ポスターなし",
    winner: "受賞",
    nominee: "ノミネート",
    edit: "編集",
    relatedArticles: "投稿されたリンク",
    addArticle: "リンクを追加",
    showMore: "詳細を表示",
    showLess: "詳細を隠す",
    watchOn: "視聴する",
    searchOn: "検索する",
  },
};

const t = labels[locale as keyof typeof labels] || labels.en;

// Streaming services configuration
const streamingServices = [
  {
    name: "U-NEXT",
    color: "bg-black text-white",
    url: (title: string) => `https://video.unext.jp/search?query=${encodeURIComponent(title)}`
  },
  {
    name: "Amazon Prime",
    color: "bg-blue-600 text-white",
    url: (title: string) => `https://www.amazon.co.jp/s?k=${encodeURIComponent(title)}&i=prime-instant-video`
  },
  {
    name: "TMDb",
    color: "bg-green-600 text-white",
    url: (title: string) => `https://www.themoviedb.org/search?query=${encodeURIComponent(title)}`
  },
  {
    name: "Filmarks",
    color: "bg-purple-600 text-white",
    url: (title: string) => `https://filmarks.com/search/movies?q=${encodeURIComponent(title)}`
  }
];

// Group nominations by organization and ceremony
const nominationsByOrg =
  movie.nominations?.reduce(
    (acc, nom) => {
      const orgKey = nom.organization.uid;
      if (!acc[orgKey]) {
        acc[orgKey] = {
          organization: nom.organization,
          ceremonies: {},
        };
      }

      const ceremonyKey = nom.ceremony.uid;
      if (!acc[orgKey].ceremonies[ceremonyKey]) {
        acc[orgKey].ceremonies[ceremonyKey] = {
          ceremony: nom.ceremony,
          nominations: [],
        };
      }

      acc[orgKey].ceremonies[ceremonyKey].nominations.push(nom);
      return acc;
    },
    {} as Record<string, any>
  ) || {};
---

<div class="relative h-full w-80 movie-card-container">
  <div
    class="rounded-xl overflow-hidden shadow-lg transition-all duration-300 ease-out hover:-translate-y-1 hover:shadow-2xl bg-white h-full flex flex-col w-full cursor-pointer movie-card"
    data-movie-title={movie.title}
  >
    <div class="h-[400px] md:h-[450px] bg-gray-100 flex items-center justify-center relative">
      {movie.posterUrl ? (
        <img
          src={movie.posterUrl}
          alt={`${movie.title} poster`}
          class="w-full h-full object-cover"
        />
      ) : (
        <div class="text-gray-500 text-xl">{t.noPoster}</div>
      )}
      
      <!-- Streaming services hover menu -->
      <div class="streaming-menu absolute inset-0 bg-black/80 flex items-center justify-center opacity-0 transition-opacity duration-300">
        <div class="bg-white rounded-lg p-6 max-w-xs w-full mx-4">
          <h4 class="text-lg font-semibold text-gray-900 mb-4 text-center">{t.searchOn}</h4>
          <div class="grid grid-cols-1 gap-3">
            {streamingServices.map((service) => (
              <a
                href={service.url(movie.title)}
                target="_blank"
                rel="noopener noreferrer"
                class={`block px-4 py-3 rounded-md text-center text-sm font-medium transition-all duration-200 hover:scale-105 ${service.color}`}
              >
                {service.name}
              </a>
            ))}
          </div>
          {movie.imdbUrl && (
            <a
              href={movie.imdbUrl}
              target="_blank"
              rel="noopener noreferrer"
              class="block px-4 py-3 mt-3 bg-yellow-500 text-gray-900 rounded-md text-center text-sm font-medium transition-all duration-200 hover:scale-105"
            >
              IMDb
            </a>
          )}
          <a
            href={`https://www.google.com/search?q=${encodeURIComponent(movie.title + " " + movie.year + " " + (locale === "ja" ? "映画" : "movie"))}`}
            target="_blank"
            rel="noopener noreferrer"
            class="block px-4 py-3 mt-3 bg-gray-600 text-white rounded-md text-center text-sm font-medium transition-all duration-200 hover:scale-105"
          >
            Google
          </a>
        </div>
      </div>
    </div>
    
    <div class="p-5 md:p-6 flex-grow flex flex-col">
      <h3 class="m-0 mb-3 text-xl md:text-2xl font-semibold">
        {movie.title}
      </h3>
      <p class="m-0 mb-4 text-gray-600 text-lg">{movie.year}</p>
      <div class="collapsible-content">
        {movie.nominations && movie.nominations.length > 0 && (
          <div class="mt-auto pt-4 border-t border-gray-200">
            {Object.values(nominationsByOrg).map((orgData: any) => (
              <div class="mb-4 last:mb-0">
                <h4 class="text-sm font-semibold text-gray-700 mb-2">
                  {orgData.organization.shortName ||
                    orgData.organization.name}
                </h4>
                {Object.values(orgData.ceremonies).map(
                  (ceremonyData: any) => (
                    <div class="mb-2">
                      <span class="text-xs text-gray-600 font-medium">
                        {ceremonyData.ceremony.year}
                      </span>
                      <ul class="list-none p-0 mt-1">
                        {ceremonyData.nominations.map((nom: any) => (
                          <li class="text-xs py-1 flex items-center justify-between">
                            <span class="text-gray-700">
                              {nom.category.name}
                            </span>
                            <span
                              class={`text-xs px-2 py-1 rounded font-medium ml-2 ${
                                nom.isWinner
                                  ? "bg-yellow-400 text-gray-900"
                                  : "bg-gray-200 text-gray-700"
                              }`}
                            >
                              {nom.isWinner ? t.winner : t.nominee}
                            </span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )
                )}
              </div>
            ))}
          </div>
        )}
        {movie.articleLinks && movie.articleLinks.length > 0 && (
          <div class="px-6 pb-2 border-t border-gray-200">
            <h4 class="text-sm font-semibold text-gray-700 mt-4 mb-3">
              {t.relatedArticles}
            </h4>
            <ul class="list-none p-0 m-0">
              {movie.articleLinks.map((article) => (
                <li class="mb-1.5 last:mb-0">
                  <a
                    href={article.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="block px-2.5 py-1.5 bg-gray-50 border border-gray-200 rounded-md no-underline text-inherit transition-all duration-200 hover:bg-gray-100 hover:border-gray-300 hover:translate-x-0.5"
                    data-article-id={article.uid}
                  >
                    <span class="text-xs text-gray-700 overflow-hidden text-ellipsis whitespace-nowrap block leading-snug">
                      {article.title}
                    </span>
                  </a>
                </li>
              ))}
            </ul>
          </div>
        )}
        <a
          href={`/movies/${movie.uid}`}
          class="inline-block mx-6 my-3 px-2 py-1 text-gray-500 no-underline rounded text-xs font-normal transition-all duration-200 border border-transparent hover:text-gray-700 hover:bg-gray-100 hover:border-gray-200"
        >
          + {t.addArticle}
        </a>
      </div>
      <button
        class="toggle-details hidden w-full px-3 py-2 mt-3 bg-transparent border border-gray-200 rounded-md text-gray-500 text-sm cursor-pointer transition-all duration-200 items-center justify-center gap-2 hover:bg-gray-50 hover:border-gray-300"
        type="button"
      >
        <span class="toggle-text">{t.showMore}</span>
        <span class="toggle-icon text-xs">▼</span>
      </button>
    </div>
  </div>
  <button
    class="edit-button absolute top-3 right-3 bg-blue-600/90 text-white border-0 px-4 py-2 rounded-md text-sm font-medium cursor-pointer transition-colors duration-200 z-10 hover:bg-blue-700/95 hidden"
    data-movie-id={movie.uid}
  >
    {t.edit}
  </button>
</div>

<style>
  /* Custom styles for collapsible functionality */
  .collapsible-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }

  .collapsible-content.expanded {
    max-height: 2000px;
    transition: max-height 0.5s ease-in;
  }

  .toggle-icon {
    transition: transform 0.2s ease;
  }

  .toggle-details.expanded .toggle-icon {
    transform: rotate(180deg);
  }

  /* Streaming menu hover styles */
  .movie-card-container:hover .streaming-menu {
    opacity: 1;
  }

  .streaming-menu {
    z-index: 20;
  }

  /* Mobile-specific styles */
  @media (max-width: 768px) {
    .movie-card-container:hover .streaming-menu {
      opacity: 0;
    }

    .streaming-menu.mobile-open {
      opacity: 1;
    }

    .toggle-details {
      display: flex !important;
    }

    .collapsible-content {
      max-height: 0;
      overflow: hidden;
    }

    .collapsible-content.expanded {
      max-height: 2000px;
      overflow: visible;
    }
  }

  @media (min-width: 769px) {
    .collapsible-content {
      max-height: none !important;
      overflow: visible !important;
    }

    .toggle-details {
      display: none !important;
    }
  }
</style>

<script
  define:vars={{
    apiUrl:
      Astro.locals?.runtime?.env?.API_URL ||
      import.meta.env.PUBLIC_API_URL ||
      "http://localhost:8787",
    locale: locale,
  }}
  is:inline
>
  // Set API URL globally
  window.API_URL = apiUrl;

  // Check if user is admin and show edit buttons
  function initializeMovieCard() {
    const adminToken = localStorage.getItem("adminToken");

    if (adminToken) {
      // Show all edit buttons for admin users
      const editButtons = document.querySelectorAll(".edit-button");
      editButtons.forEach((button) => {
        button.classList.remove("hidden");
        button.style.display = "block";
      });

      // Add click event listeners
      editButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          e.stopPropagation();
          const movieId = button.getAttribute("data-movie-id");
          if (movieId) {
            window.location.href = `/admin/movies/${movieId}`;
          }
        });
      });
    }

    // Handle collapsible content
    const toggleButtons = document.querySelectorAll(".toggle-details");

    toggleButtons.forEach((toggleButton) => {
      const movieCard = toggleButton.closest(".relative");
      const collapsibleContent = movieCard?.querySelector(
        ".collapsible-content"
      );
      const toggleText = toggleButton.querySelector(".toggle-text");

      if (collapsibleContent && toggleText) {
        toggleButton.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();

          const isExpanded = collapsibleContent.classList.contains("expanded");

          if (isExpanded) {
            collapsibleContent.classList.remove("expanded");
            toggleButton.classList.remove("expanded");
            toggleText.textContent =
              locale === "ja" ? "詳細を表示" : "Show details";
          } else {
            collapsibleContent.classList.add("expanded");
            toggleButton.classList.add("expanded");
            toggleText.textContent =
              locale === "ja" ? "詳細を隠す" : "Hide details";
          }
        });
      }
    });

    // Handle streaming menu clicks - prevent event bubbling to parent
    const streamingMenus = document.querySelectorAll(".streaming-menu");
    streamingMenus.forEach((menu) => {
      const links = menu.querySelectorAll("a");
      links.forEach((link) => {
        link.addEventListener("click", (e) => {
          e.stopPropagation();
        });
      });
    });

    // Handle mobile tap interactions for streaming menu
    const movieCards = document.querySelectorAll(".movie-card");
    movieCards.forEach((card) => {
      const container = card.closest(".movie-card-container");
      const streamingMenu = card.querySelector(".streaming-menu");
      
      if (container && streamingMenu) {
        let touchStartTime = 0;
        
        // Handle touch events for mobile
        card.addEventListener("touchstart", (e) => {
          touchStartTime = Date.now();
        });
        
        card.addEventListener("touchend", (e) => {
          const touchDuration = Date.now() - touchStartTime;
          
          // Only respond to quick taps (not scrolls)
          if (touchDuration < 200) {
            e.preventDefault();
            
            const isOpen = streamingMenu.classList.contains("mobile-open");
            
            // Close all other open menus
            document.querySelectorAll(".streaming-menu.mobile-open").forEach((menu) => {
              menu.classList.remove("mobile-open");
            });
            
            // Toggle current menu
            if (!isOpen) {
              streamingMenu.classList.add("mobile-open");
            }
          }
        });
      }
    });

    // Close streaming menu when clicking outside
    document.addEventListener("click", (e) => {
      const openMenus = document.querySelectorAll(".streaming-menu.mobile-open");
      openMenus.forEach((menu) => {
        const container = menu.closest(".movie-card-container");
        if (container && !container.contains(e.target)) {
          menu.classList.remove("mobile-open");
        }
      });
    });
  }

  // Initialize immediately if DOM is ready, otherwise wait for it
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeMovieCard);
  } else {
    initializeMovieCard();
  }
</script>
