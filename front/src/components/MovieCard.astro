---
interface Props {
  movie: {
    uid: string;
    title: string;
    year: number;
    posterUrl?: string;
    imdbUrl?: string;
    nominations?: Array<{
      uid: string;
      isWinner: boolean;
      specialMention?: string;
      category: {
        uid: string;
        name: string;
      };
      ceremony: {
        uid: string;
        number: number;
        year: number;
      };
      organization: {
        uid: string;
        name: string;
        shortName: string;
      };
    }>;
    articleLinks?: Array<{
      uid: string;
      url: string;
      title: string;
      description?: string;
    }>;
  };
  locale?: string;
}

const { movie, locale = "en" } = Astro.props;

const labels = {
  en: {
    noPoster: "No Poster",
    winner: "Winner",
    nominee: "Nominee",
    edit: "Edit",
    relatedArticles: "Related Articles",
    addArticle: "Add Article",
    showMore: "Show details",
    showLess: "Hide details",
  },
  ja: {
    noPoster: "ポスターなし",
    winner: "受賞",
    nominee: "ノミネート",
    edit: "編集",
    relatedArticles: "関連記事",
    addArticle: "記事を追加",
    showMore: "詳細を表示",
    showLess: "詳細を隠す",
  },
};

const t = labels[locale as keyof typeof labels] || labels.en;

// Group nominations by organization and ceremony
const nominationsByOrg =
  movie.nominations?.reduce(
    (acc, nom) => {
      const orgKey = nom.organization.uid;
      if (!acc[orgKey]) {
        acc[orgKey] = {
          organization: nom.organization,
          ceremonies: {},
        };
      }

      const ceremonyKey = nom.ceremony.uid;
      if (!acc[orgKey].ceremonies[ceremonyKey]) {
        acc[orgKey].ceremonies[ceremonyKey] = {
          ceremony: nom.ceremony,
          nominations: [],
        };
      }

      acc[orgKey].ceremonies[ceremonyKey].nominations.push(nom);
      return acc;
    },
    {} as Record<string, any>
  ) || {};
---

<div class="relative h-full w-80">
  <div class="rounded-xl overflow-hidden shadow-lg transition-all duration-300 ease-out hover:-translate-y-1 hover:shadow-2xl bg-white h-full flex flex-col w-full">
    {
      movie.imdbUrl ? (
        <a
          href={movie.imdbUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="text-inherit no-underline block"
        >
          <div class="h-[400px] md:h-[450px] bg-gray-100 flex items-center justify-center">
            {movie.posterUrl ? (
              <img src={movie.posterUrl} alt={`${movie.title} poster`} class="w-full h-full object-cover" />
            ) : (
              <div class="text-gray-500 text-xl">{t.noPoster}</div>
            )}
          </div>
          <div class="p-5 md:p-6 flex-grow flex flex-col">
            <h3 class="m-0 mb-3 text-xl md:text-2xl font-semibold">{movie.title}</h3>
            <p class="m-0 mb-4 text-gray-600 text-lg">{movie.year}</p>
            <div class="collapsible-content">
              {movie.nominations && movie.nominations.length > 0 && (
                <div class="mt-auto pt-4 border-t border-gray-200">
                  {Object.values(nominationsByOrg).map((orgData: any) => (
                    <div class="mb-4 last:mb-0">
                      <h4 class="text-sm font-semibold text-gray-700 mb-2">
                        {orgData.organization.shortName ||
                          orgData.organization.name}
                      </h4>
                      {Object.values(orgData.ceremonies).map(
                        (ceremonyData: any) => (
                          <div class="mb-2">
                            <span class="text-xs text-gray-600 font-medium">
                              {ceremonyData.ceremony.year}
                            </span>
                            <ul class="list-none p-0 mt-1">
                              {ceremonyData.nominations.map((nom: any) => (
                                <li class="text-xs py-1 flex items-center justify-between">
                                  <span class="text-gray-700">
                                    {nom.category.name}
                                  </span>
                                  <span class={`text-xs px-2 py-1 rounded font-medium ml-2 ${
                                    nom.isWinner 
                                      ? 'bg-yellow-400 text-gray-900' 
                                      : 'bg-gray-200 text-gray-700'
                                  }`}>
                                    {nom.isWinner ? t.winner : t.nominee}
                                  </span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )
                      )}
                    </div>
                  ))}
                </div>
              )}
              {movie.articleLinks && movie.articleLinks.length > 0 && (
                <div class="px-6 pb-2 border-t border-gray-200">
                  <h4 class="text-sm font-semibold text-gray-700 mt-4 mb-3">{t.relatedArticles}</h4>
                  <ul class="list-none p-0 m-0">
                    {movie.articleLinks.map((article) => (
                      <li class="mb-1.5 last:mb-0">
                        <a
                          href={article.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="block px-2.5 py-1.5 bg-gray-50 border border-gray-200 rounded-md no-underline text-inherit transition-all duration-200 hover:bg-gray-100 hover:border-gray-300 hover:translate-x-0.5"
                          data-article-id={article.uid}
                        >
                          <span class="text-xs text-gray-700 overflow-hidden text-ellipsis whitespace-nowrap block leading-snug">{article.title}</span>
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              <a href={`/movies/${movie.uid}`} class="inline-block mx-6 my-3 px-2 py-1 text-gray-500 no-underline rounded text-xs font-normal transition-all duration-200 border border-transparent hover:text-gray-700 hover:bg-gray-100 hover:border-gray-200">
                + {t.addArticle}
              </a>
            </div>
            <button class="toggle-details hidden w-full px-3 py-2 mt-3 bg-transparent border border-gray-200 rounded-md text-gray-500 text-sm cursor-pointer transition-all duration-200 items-center justify-center gap-2 hover:bg-gray-50 hover:border-gray-300" type="button">
              <span class="toggle-text">{t.showMore}</span>
              <span class="toggle-icon text-xs">▼</span>
            </button>
          </div>
        </a>
      ) : (
        <div class="block">
          <div class="h-[400px] md:h-[450px] bg-gray-100 flex items-center justify-center">
            {movie.posterUrl ? (
              <img src={movie.posterUrl} alt={`${movie.title} poster`} class="w-full h-full object-cover" />
            ) : (
              <div class="text-gray-500 text-xl">{t.noPoster}</div>
            )}
          </div>
          <div class="p-5 md:p-6 flex-grow flex flex-col">
            <h3 class="m-0 mb-3 text-xl md:text-2xl font-semibold">{movie.title}</h3>
            <p class="m-0 mb-4 text-gray-600 text-lg">{movie.year}</p>
            <div class="collapsible-content">
              {movie.nominations && movie.nominations.length > 0 && (
                <div class="mt-auto pt-4 border-t border-gray-200">
                  {Object.values(nominationsByOrg).map((orgData: any) => (
                    <div class="mb-4 last:mb-0">
                      <h4 class="text-sm font-semibold text-gray-700 mb-2">
                        {orgData.organization.shortName ||
                          orgData.organization.name}
                      </h4>
                      {Object.values(orgData.ceremonies).map(
                        (ceremonyData: any) => (
                          <div class="mb-2">
                            <span class="text-xs text-gray-600 font-medium">
                              {ceremonyData.ceremony.year}
                            </span>
                            <ul class="list-none p-0 mt-1">
                              {ceremonyData.nominations.map((nom: any) => (
                                <li class="text-xs py-1 flex items-center justify-between">
                                  <span class="text-gray-700">
                                    {nom.category.name}
                                  </span>
                                  <span class={`text-xs px-2 py-1 rounded font-medium ml-2 ${
                                    nom.isWinner 
                                      ? 'bg-yellow-400 text-gray-900' 
                                      : 'bg-gray-200 text-gray-700'
                                  }`}>
                                    {nom.isWinner ? t.winner : t.nominee}
                                  </span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )
                      )}
                    </div>
                  ))}
                </div>
              )}
              {movie.articleLinks && movie.articleLinks.length > 0 && (
                <div class="px-6 pb-2 border-t border-gray-200">
                  <h4 class="text-sm font-semibold text-gray-700 mt-4 mb-3">{t.relatedArticles}</h4>
                  <ul class="list-none p-0 m-0">
                    {movie.articleLinks.map((article) => (
                      <li class="mb-1.5 last:mb-0">
                        <a
                          href={article.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="block px-2.5 py-1.5 bg-gray-50 border border-gray-200 rounded-md no-underline text-inherit transition-all duration-200 hover:bg-gray-100 hover:border-gray-300 hover:translate-x-0.5"
                          data-article-id={article.uid}
                        >
                          <span class="text-xs text-gray-700 overflow-hidden text-ellipsis whitespace-nowrap block leading-snug">{article.title}</span>
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              <a href={`/movies/${movie.uid}`} class="inline-block mx-6 my-3 px-2 py-1 text-gray-500 no-underline rounded text-xs font-normal transition-all duration-200 border border-transparent hover:text-gray-700 hover:bg-gray-100 hover:border-gray-200">
                + {t.addArticle}
              </a>
            </div>
            <button class="toggle-details hidden w-full px-3 py-2 mt-3 bg-transparent border border-gray-200 rounded-md text-gray-500 text-sm cursor-pointer transition-all duration-200 items-center justify-center gap-2 hover:bg-gray-50 hover:border-gray-300" type="button">
              <span class="toggle-text">{t.showMore}</span>
              <span class="toggle-icon text-xs">▼</span>
            </button>
          </div>
        </div>
      )
    }
  </div>
  <button class="edit-button absolute top-3 right-3 bg-blue-600/90 text-white border-0 px-4 py-2 rounded-md text-sm font-medium cursor-pointer transition-colors duration-200 z-10 hover:bg-blue-700/95 hidden" data-movie-id={movie.uid}>
    {t.edit}
  </button>
</div>

<style>
  /* Custom styles for collapsible functionality */
  .collapsible-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }

  .collapsible-content.expanded {
    max-height: 2000px;
    transition: max-height 0.5s ease-in;
  }

  .toggle-icon {
    transition: transform 0.2s ease;
  }

  .toggle-details.expanded .toggle-icon {
    transform: rotate(180deg);
  }

  @media (max-width: 768px) {
    .toggle-details {
      display: flex !important;
    }

    .collapsible-content {
      max-height: 0;
      overflow: hidden;
    }

    .collapsible-content.expanded {
      max-height: 2000px;
      overflow: visible;
    }
  }

  @media (min-width: 769px) {
    .collapsible-content {
      max-height: none !important;
      overflow: visible !important;
    }
    
    .toggle-details {
      display: none !important;
    }
  }
</style>

<script
  define:vars={{
    apiUrl:
      Astro.locals?.runtime?.env?.API_URL ||
      import.meta.env.PUBLIC_API_URL ||
      "http://localhost:8787",
    locale: locale,
  }}
  is:inline
>
  // Set API URL globally
  window.API_URL = apiUrl;

  // Check if user is admin and show edit buttons
  function initializeMovieCard() {
    const adminToken = localStorage.getItem("adminToken");

    if (adminToken) {
      // Show all edit buttons for admin users
      const editButtons = document.querySelectorAll(".edit-button");
      editButtons.forEach((button) => {
        button.classList.remove("hidden");
        button.style.display = "block";
      });

      // Add click event listeners
      editButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          e.stopPropagation();
          const movieId = button.getAttribute("data-movie-id");
          if (movieId) {
            window.location.href = `/edit/${movieId}`;
          }
        });
      });
    }

    // Handle collapsible content
    const toggleButtons = document.querySelectorAll('.toggle-details');
    
    toggleButtons.forEach((toggleButton) => {
      const movieCard = toggleButton.closest('.relative');
      const collapsibleContent = movieCard?.querySelector('.collapsible-content');
      const toggleText = toggleButton.querySelector('.toggle-text');
      
      if (collapsibleContent && toggleText) {
        toggleButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          const isExpanded = collapsibleContent.classList.contains('expanded');
          
          if (isExpanded) {
            collapsibleContent.classList.remove('expanded');
            toggleButton.classList.remove('expanded');
            toggleText.textContent = locale === 'ja' ? '詳細を表示' : 'Show details';
          } else {
            collapsibleContent.classList.add('expanded');
            toggleButton.classList.add('expanded');
            toggleText.textContent = locale === 'ja' ? '詳細を隠す' : 'Hide details';
          }
        });
      }
    });
  }

  // Initialize immediately if DOM is ready, otherwise wait for it
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeMovieCard);
  } else {
    initializeMovieCard();
  }
</script>
