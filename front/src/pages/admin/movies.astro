---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Admin - Movies | SHINE">
  <div class="admin-container">
    <div class="admin-header">
      <h1>Movies Management</h1>
      <div class="header-actions">
        <a href="/admin/selections" class="nav-btn">Movie Selections</a>
        <button id="logoutBtn" class="logout-btn">Logout</button>
      </div>
    </div>
    
    <div class="search-container">
      <div class="search-input-wrapper">
        <input
          type="text"
          id="movieSearch"
          class="search-input"
          placeholder="Search movies by title..."
        />
        <button id="clearSearchBtn" class="clear-search-btn" style="display: none;">
          ✕
        </button>
      </div>
    </div>
    
    <div id="moviesContainer" class="movies-container">
      <div class="loading">Loading movies...</div>
    </div>
    
    <div id="pagination" class="pagination"></div>
  </div>
</Layout>

<style>
  .admin-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .header-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .nav-btn {
    padding: 0.5rem 1rem;
    background: #4f46e5;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-size: 0.875rem;
    transition: background-color 0.2s;
  }

  .nav-btn:hover {
    background: #4338ca;
  }

  h1 {
    color: #333;
    margin: 0;
  }

  .logout-btn {
    padding: 0.5rem 1rem;
    background: #dc2626;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
  }

  .logout-btn:hover {
    background: #b91c1c;
  }

  .movies-container {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    overflow: hidden;
  }

  .loading {
    text-align: center;
    padding: 3rem;
    color: #666;
  }

  .error {
    text-align: center;
    padding: 3rem;
    color: #dc2626;
  }

  table {
    width: 100%;
    border-collapse: collapse;
  }

  th {
    background: #f3f4f6;
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: #374151;
    border-bottom: 1px solid #e5e7eb;
  }

  td {
    padding: 1rem;
    border-bottom: 1px solid #e5e7eb;
  }

  tr:hover {
    background: #f9fafb;
  }

  .movie-poster {
    width: 50px;
    height: 75px;
    object-fit: cover;
    border-radius: 4px;
  }

  .movie-title {
    font-weight: 500;
    color: #111827;
  }

  .movie-year {
    color: #6b7280;
  }

  .movie-actions {
    display: flex;
    gap: 0.5rem;
  }

  .btn {
    padding: 0.375rem 0.75rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    text-decoration: none;
    display: inline-block;
  }

  .btn-primary {
    background: #2563eb;
    color: white;
  }

  .btn-primary:hover {
    background: #1d4ed8;
  }

  .btn-secondary {
    background: #6b7280;
    color: white;
  }

  .btn-secondary:hover {
    background: #4b5563;
  }

  .btn-danger {
    background: #dc2626;
    color: white;
  }

  .btn-danger:hover {
    background: #b91c1c;
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin-top: 2rem;
  }

  .pagination button {
    padding: 0.5rem 1rem;
    border: 1px solid #e5e7eb;
    background: white;
    color: #374151;
    border-radius: 4px;
    cursor: pointer;
  }

  .pagination button:hover:not(:disabled) {
    background: #f3f4f6;
  }

  .pagination button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .pagination span {
    color: #6b7280;
  }

  .search-container {
    margin-bottom: 2rem;
  }

  .search-input-wrapper {
    position: relative;
    max-width: 400px;
  }

  .search-input {
    width: 100%;
    padding: 0.75rem 2.5rem 0.75rem 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    font-size: 1rem;
    background: white;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: border-color 0.2s, box-shadow 0.2s;
  }

  .search-input:focus {
    outline: none;
    border-color: #4f46e5;
    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
  }

  .clear-search-btn {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
    font-size: 1rem;
    padding: 0.25rem;
    border-radius: 50%;
    width: 1.5rem;
    height: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s;
  }

  .clear-search-btn:hover {
    background: #f3f4f6;
    color: #374151;
  }
</style>

<script>
  // Determine API URL based on environment
  const API_BASE = window.location.hostname.includes('localhost') || window.location.hostname.includes('127.0.0.1')
    ? 'http://localhost:8787'
    : 'https://shine-api.yuta25.workers.dev';
  
  let currentPage = 1;
  let totalPages = 1;
  let currentSearchQuery = '';
  let searchTimeout: ReturnType<typeof setTimeout> | null = null;

  function checkAuth() {
    const token = localStorage.getItem('adminToken');
    if (!token) {
      window.location.href = '/admin/login';
      return false;
    }
    return token;
  }

  interface Movie {
    uid: string;
    title: string;
    year: number | null;
    originalLanguage: string | null;
    posterUrl: string | null;
    imdbUrl?: string;
  }

  interface PaginationData {
    page: number;
    limit: number;
    totalCount: number;
    totalPages: number;
  }

  interface MoviesResponse {
    movies: Movie[];
    pagination: PaginationData;
  }

  async function fetchMovies(page = 1, searchQuery = '') {
    const token = checkAuth();
    if (!token) return;

    const container = document.getElementById('moviesContainer');
    if (!container) return;
    
    container.innerHTML = '<div class="loading">Loading movies...</div>';

    try {
      const searchParam = searchQuery ? `&search=${encodeURIComponent(searchQuery)}` : '';
      const response = await fetch(`${API_BASE}/admin/movies?page=${page}&limit=20${searchParam}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.status === 401) {
        localStorage.removeItem('adminToken');
        window.location.href = '/admin/login';
        return;
      }

      if (!response.ok) {
        throw new Error('Failed to fetch movies');
      }

      const data: MoviesResponse = await response.json();
      currentPage = data.pagination.page;
      totalPages = data.pagination.totalPages;
      
      renderMovies(data.movies);
      renderPagination();
    } catch (error) {
      container.innerHTML = '<div class="error">Failed to load movies. Please try again.</div>';
    }
  }

  function renderMovies(movies: Movie[]) {
    const container = document.getElementById('moviesContainer');
    if (!container) return;
    
    if (movies.length === 0) {
      container.innerHTML = '<div class="loading">No movies found</div>';
      return;
    }

    const table = document.createElement('table');
    table.innerHTML = `
      <thead>
        <tr>
          <th>Poster</th>
          <th>Title</th>
          <th>Year</th>
          <th>Language</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        ${movies.map((movie: Movie) => `
          <tr>
            <td>
              ${movie.posterUrl 
                ? `<img src="${movie.posterUrl}" alt="${movie.title}" class="movie-poster">` 
                : '<div class="movie-poster" style="background: #e5e7eb;"></div>'
              }
            </td>
            <td>
              <div class="movie-title">${movie.title}</div>
            </td>
            <td class="movie-year">${movie.year || 'N/A'}</td>
            <td>${movie.originalLanguage || 'N/A'}</td>
            <td>
              <div class="movie-actions">
                <a href="/admin/movies/${movie.uid}" class="btn btn-primary">Edit</a>
                ${movie.imdbUrl 
                  ? `<a href="${movie.imdbUrl}" target="_blank" class="btn btn-secondary">IMDb</a>` 
                  : ''
                }
                <button onclick="deleteMovie('${movie.uid}', '${movie.title}')" class="btn btn-danger">Delete</button>
                <button onclick="showMergeDialog('${movie.uid}', '${movie.title}')" class="btn btn-secondary">Merge</button>
              </div>
            </td>
          </tr>
        `).join('')}
      </tbody>
    `;
    
    container.innerHTML = '';
    container.appendChild(table);
  }

  function renderPagination() {
    const pagination = document.getElementById('pagination');
    if (!pagination) return;
    
    pagination.innerHTML = `
      <button id="prevBtn" ${currentPage === 1 ? 'disabled' : ''}>Previous</button>
      <span>Page ${currentPage} of ${totalPages}</span>
      <button id="nextBtn" ${currentPage === totalPages ? 'disabled' : ''}>Next</button>
    `;

    document.getElementById('prevBtn')?.addEventListener('click', () => {
      if (currentPage > 1) fetchMovies(currentPage - 1, currentSearchQuery);
    });

    document.getElementById('nextBtn')?.addEventListener('click', () => {
      if (currentPage < totalPages) fetchMovies(currentPage + 1, currentSearchQuery);
    });
  }

  async function deleteMovie(movieId: string, movieTitle: string) {
    if (!confirm(`Are you sure you want to delete "${movieTitle}"? This action cannot be undone.`)) {
      return;
    }

    const token = checkAuth();
    if (!token) return;

    try {
      const response = await fetch(`${API_BASE}/admin/movies/${movieId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.status === 401) {
        localStorage.removeItem('adminToken');
        window.location.href = '/admin/login';
        return;
      }

      if (!response.ok) {
        throw new Error('Failed to delete movie');
      }

      // Refresh the current page
      fetchMovies(currentPage, currentSearchQuery);
      alert(`Movie "${movieTitle}" has been deleted successfully.`);
    } catch (error) {
      alert('Failed to delete movie. Please try again.');
      console.error('Delete error:', error);
    }
  }

  function setupSearchFunctionality() {
    const searchInput = document.getElementById('movieSearch') as unknown as HTMLInputElement;
    const clearSearchBtn = document.getElementById('clearSearchBtn') as unknown as HTMLButtonElement;

    if (!searchInput || !clearSearchBtn) return;

    searchInput.addEventListener('input', (e) => {
      const query = (e.target as unknown as HTMLInputElement).value.trim();
      
      // Show/hide clear button
      clearSearchBtn.style.display = query ? 'flex' : 'none';
      
      // Clear existing timeout
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }
      
      // Set new timeout for search
      searchTimeout = setTimeout(() => {
        currentSearchQuery = query;
        currentPage = 1; // Reset to first page for new search
        fetchMovies(1, query);
      }, 300);
    });

    clearSearchBtn.addEventListener('click', () => {
      searchInput.value = '';
      clearSearchBtn.style.display = 'none';
      currentSearchQuery = '';
      currentPage = 1;
      fetchMovies(1, '');
    });
  }

  // Make deleteMovie available globally
  (window as any).deleteMovie = deleteMovie;

  // Merge movies functionality
  function showMergeDialog(sourceId: string, sourceTitle: string) {
    const targetId = prompt(`映画「${sourceTitle}」を他の映画にマージします。\n\nマージ先の映画IDを入力してください：`);
    
    if (targetId && targetId.trim()) {
      const confirmed = confirm(
        `確認：\n\n` +
        `マージ元: ${sourceTitle} (${sourceId})\n` +
        `マージ先: ${targetId.trim()}\n\n` +
        `マージ元の映画とそのデータは削除されます。\n` +
        `この操作は取り消せません。\n\n` +
        `続行しますか？`
      );
      
      if (confirmed) {
        mergeMovies(sourceId, targetId.trim(), sourceTitle);
      }
    }
  }

  async function mergeMovies(sourceId: string, targetId: string, sourceTitle: string) {
    const token = checkAuth();
    if (!token) return;

    try {
      const response = await fetch(`${API_BASE}/admin/movies/${sourceId}/merge/${targetId}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      // Refresh the movies list
      fetchMovies(currentPage, currentSearchQuery);
      alert(`Movie "${sourceTitle}" has been successfully merged.`);
    } catch (error) {
      alert(`Failed to merge movie: ${error instanceof Error ? error.message : 'Unknown error'}`);
      console.error('Merge error:', error);
    }
  }

  // Make showMergeDialog available globally
  (window as any).showMergeDialog = showMergeDialog;

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    checkAuth();
    fetchMovies();
    setupSearchFunctionality();

    document.getElementById('logoutBtn')?.addEventListener('click', () => {
      localStorage.removeItem('adminToken');
      window.location.href = '/';
    });
  });
</script>