---
import Layout from "../../layouts/Layout.astro";

function getLocaleFromRequest(request: Request): string {
  const url = new URL(request.url);
  const localeParam = url.searchParams.get('locale');
  if (localeParam && ['en', 'ja'].includes(localeParam)) {
    return localeParam;
  }

  const acceptLanguage = request.headers.get('accept-language');
  if (acceptLanguage) {
    const languages = acceptLanguage
      .split(',')
      .map(lang => lang.trim().split(';')[0].split('-')[0])
      .filter(lang => ['en', 'ja'].includes(lang));
    
    if (languages.length > 0) {
      return languages[0];
    }
  }

  return 'en';
}

const locale = getLocaleFromRequest(Astro.request);
const apiUrl = import.meta.env.PUBLIC_API_URL || 'http://localhost:8787';

const translations = {
  en: {
    title: "Admin Login - SHINE",
    heading: "SHINE Admin Login",
    passwordPlaceholder: "Enter admin password",
    loginButton: "Login",
    loginError: "Invalid password",
    loginSuccess: "Login successful! Redirecting...",
    loginFailed: "Login failed. Please try again.",
    loggingIn: "Logging in...",
    backToHome: "← Back to Home"
  },
  ja: {
    title: "管理者ログイン - SHINE",
    heading: "SHINE 管理者ログイン",
    passwordPlaceholder: "管理者パスワードを入力",
    loginButton: "ログイン",
    loginError: "パスワードが正しくありません",
    loginSuccess: "ログイン成功！リダイレクト中...",
    loginFailed: "ログインに失敗しました。再度お試しください。",
    loggingIn: "ログイン中...",
    backToHome: "← ホームに戻る"
  }
};

const t = translations[locale as keyof typeof translations] || translations.en;
---

<Layout title={t.title}>
  <main class="login-main">
    <div class="login-container">
      <a href="/" class="back-link">{t.backToHome}</a>
      <h1>{t.heading}</h1>
      <form id="loginForm">
        <input 
          type="password" 
          id="password" 
          placeholder={t.passwordPlaceholder}
          required
          autocomplete="current-password"
        >
        <button type="submit" id="submitBtn">{t.loginButton}</button>
      </form>
      <div id="message"></div>
    </div>
  </main>
</Layout>

<style>
  .login-main {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 1rem;
  }

  .login-container {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    width: 100%;
    max-width: 400px;
    position: relative;
  }

  .back-link {
    position: absolute;
    top: 1rem;
    left: 1rem;
    color: #6b7280;
    text-decoration: none;
    font-size: 0.875rem;
    transition: color 0.3s ease;
  }

  .back-link:hover {
    color: #374151;
  }

  h1 {
    text-align: center;
    margin: 2rem 0;
    color: #1f2937;
    font-size: 1.75rem;
    font-weight: 700;
  }

  #loginForm {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  input {
    padding: 0.875rem;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }

  input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  button {
    padding: 0.875rem;
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  button:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
  }

  button:disabled {
    background: #9ca3af;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  #message {
    margin-top: 1rem;
    padding: 0.75rem;
    border-radius: 6px;
    font-size: 0.875rem;
    text-align: center;
    min-height: 1rem;
  }

  #message.error {
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  #message.success {
    background: #f0fdf4;
    color: #059669;
    border: 1px solid #bbf7d0;
  }

  @media (max-width: 480px) {
    .login-container {
      padding: 1.5rem;
    }

    h1 {
      font-size: 1.5rem;
      margin: 1.5rem 0;
    }
  }
</style>

<script define:vars={{ locale, translations, apiUrl }} is:inline>
  const t = translations[locale] || translations.en;
  const form = document.getElementById('loginForm');
  const passwordInput = document.getElementById('password');
  const submitBtn = document.getElementById('submitBtn');
  const message = document.getElementById('message');
  
  // Check if already logged in
  if (localStorage.getItem('adminToken')) {
    window.location.href = '/';
  }
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const password = passwordInput.value;
    if (!password) return;
    
    submitBtn.disabled = true;
    submitBtn.textContent = t.loggingIn;
    message.textContent = '';
    message.className = '';
    
    try {
      const API_URL = 'http://localhost:8787';
      const response = await fetch(`${API_URL}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ password })
      });
      
      if (response.ok) {
        const { token } = await response.json();
        localStorage.setItem('adminToken', token);
        message.className = 'success';
        message.textContent = t.loginSuccess;
        
        setTimeout(() => {
          window.location.href = '/';
        }, 1000);
      } else {
        message.className = 'error';
        message.textContent = t.loginError;
        passwordInput.value = '';
        passwordInput.focus();
      }
    } catch (error) {
      console.error('Login error:', error);
      message.className = 'error';
      message.textContent = t.loginFailed;
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = t.loginButton;
    }
  });
  
  // Focus password input on load
  passwordInput.focus();
</script>