---
export const prerender = false;

import { getApiUrl } from '../../utils/api';

interface Movie {
  uid: string;
  title: string;
  year: number;
  posterUrl?: string;
  imdbUrl?: string;
}

interface Article {
  uid: string;
  url: string;
  title: string;
  description?: string;
  submittedAt: string;
}

const { id } = Astro.params;
const apiUrl = getApiUrl(Astro.locals);

// Fetch movie details
const movieResponse = await fetch(`${apiUrl}/movies/${id}`);
if (!movieResponse.ok) {
  return Astro.redirect("/404");
}
const movie: Movie = await movieResponse.json();

// Fetch article links
const articlesResponse = await fetch(`${apiUrl}/movies/${id}/article-links`);
const articles: Article[] = articlesResponse.ok ? await articlesResponse.json() : [];

// Determine locale
const locale = Astro.url.searchParams.get("locale") || "en";

const labels = {
  en: {
    title: "Movie Details",
    relatedArticles: "Related Articles",
    addArticle: "Add New Article",
    articleUrl: "Article URL",
    articleTitle: "Article Title",
    articleDescription: "Description (optional)",
    submit: "Submit",
    submitting: "Submitting...",
    noArticles: "No articles yet. Be the first to add one!",
    backToHome: "Back to Home",
    success: "Article submitted successfully!",
    error: "Error submitting article. Please try again.",
    rateLimit: "Too many submissions. Please try again later.",
  },
  ja: {
    title: "映画詳細",
    relatedArticles: "関連記事",
    addArticle: "新しい記事を追加",
    articleUrl: "記事のURL",
    articleTitle: "記事のタイトル",
    articleDescription: "説明（任意）",
    submit: "送信",
    submitting: "送信中...",
    noArticles: "まだ記事がありません。最初の1つを追加しましょう！",
    backToHome: "ホームに戻る",
    success: "記事が正常に送信されました！",
    error: "記事の送信中にエラーが発生しました。もう一度お試しください。",
    rateLimit: "送信が多すぎます。後でもう一度お試しください。",
  },
};

const t = labels[locale as keyof typeof labels] || labels.en;
---

<!doctype html>
<html lang={locale}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{movie.title} - {t.title}</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        margin: 0;
        padding: 0;
        background: #f5f5f5;
      }

      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }

      .back-link {
        display: inline-block;
        margin-bottom: 20px;
        color: #2563eb;
        text-decoration: none;
        font-size: 0.875rem;
      }

      .back-link:hover {
        text-decoration: underline;
      }

      .movie-header {
        background: white;
        padding: 24px;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 24px;
      }

      .movie-title {
        font-size: 2rem;
        margin: 0 0 8px 0;
      }

      .movie-year {
        color: #666;
        font-size: 1.1rem;
      }

      .articles-section {
        background: white;
        padding: 24px;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 24px;
      }

      .section-title {
        font-size: 1.5rem;
        margin: 0 0 16px 0;
      }

      .article-list {
        list-style: none;
        padding: 0;
        margin: 0;
      }

      .article-item {
        margin-bottom: 12px;
        padding: 12px;
        background: #f8f8f8;
        border-radius: 8px;
      }

      .article-link {
        color: #2563eb;
        text-decoration: none;
        font-weight: 500;
        display: block;
        margin-bottom: 4px;
      }

      .article-link:hover {
        text-decoration: underline;
      }

      .article-meta {
        font-size: 0.875rem;
        color: #666;
      }

      .no-articles {
        color: #666;
        font-style: italic;
      }

      .add-article-section {
        background: white;
        padding: 24px;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .form-group {
        margin-bottom: 16px;
      }

      label {
        display: block;
        margin-bottom: 4px;
        font-weight: 500;
      }

      input[type="url"],
      input[type="text"],
      textarea {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
        font-family: inherit;
      }

      textarea {
        resize: vertical;
        min-height: 80px;
      }

      .submit-button {
        background: #2563eb;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s ease;
      }

      .submit-button:hover {
        background: #1d4ed8;
      }

      .submit-button:disabled {
        background: #94a3b8;
        cursor: not-allowed;
      }

      .message {
        margin-top: 12px;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 0.875rem;
      }

      .message.success {
        background: #d1fae5;
        color: #065f46;
      }

      .message.error {
        background: #fee2e2;
        color: #991b1b;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <a href={`/?locale=${locale}`} class="back-link">← {t.backToHome}</a>

      <div class="movie-header">
        <h1 class="movie-title">{movie.title}</h1>
        <p class="movie-year">{movie.year}</p>
      </div>

      <div class="articles-section">
        <h2 class="section-title">{t.relatedArticles}</h2>
        {articles.length > 0 ? (
          <ul class="article-list">
            {articles.map((article) => (
              <li class="article-item">
                <a
                  href={article.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="article-link"
                  data-article-id={article.uid}
                >
                  {article.title}
                </a>
                {article.description && (
                  <div class="article-meta">
                    {article.description}
                  </div>
                )}
              </li>
            ))}
          </ul>
        ) : (
          <p class="no-articles">{t.noArticles}</p>
        )}
      </div>

      <div class="add-article-section">
        <h2 class="section-title">{t.addArticle}</h2>
        <form id="article-form">
          <div class="form-group">
            <label for="url">{t.articleUrl}</label>
            <input type="url" id="url" name="url" required />
          </div>
          <div class="form-group">
            <label for="title">{t.articleTitle}</label>
            <input type="text" id="title" name="title" required maxlength="200" />
          </div>
          <div class="form-group">
            <label for="description">{t.articleDescription}</label>
            <textarea id="description" name="description" maxlength="500"></textarea>
          </div>
          <button type="submit" class="submit-button">{t.submit}</button>
          <div id="message" class="message" style="display: none;"></div>
        </form>
      </div>
    </div>

    <script define:vars={{ apiUrl, movieId: id, t }} is:inline>
      document.getElementById("article-form").addEventListener("submit", async (e) => {
        e.preventDefault();
        
        const form = e.target;
        const submitButton = form.querySelector('button[type="submit"]');
        const messageDiv = document.getElementById("message");
        
        // Disable form during submission
        submitButton.disabled = true;
        submitButton.textContent = t.submitting;
        messageDiv.style.display = "none";
        
        const formData = new FormData(form);
        const data = {
          url: formData.get("url"),
          title: formData.get("title"),
          description: formData.get("description") || undefined,
        };
        
        try {
          const response = await fetch(`${apiUrl}/movies/${movieId}/article-links`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });
          
          if (response.ok) {
            messageDiv.textContent = t.success;
            messageDiv.className = "message success";
            messageDiv.style.display = "block";
            
            // Reset form
            form.reset();
            
            // Reload page after 2 seconds to show new article
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          } else if (response.status === 429) {
            throw new Error(t.rateLimit);
          } else {
            throw new Error(t.error);
          }
        } catch (error) {
          messageDiv.textContent = error.message || t.error;
          messageDiv.className = "message error";
          messageDiv.style.display = "block";
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = t.submit;
        }
      });
    </script>
  </body>
</html>