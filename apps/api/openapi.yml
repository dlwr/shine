openapi: '3.1.0'
info:
  title: SHINE Movie Database API
  description: |
    SHINE is a comprehensive movie database API designed to be the world's most organized movie database.
    It collects and organizes movie information, awards, nominations, and multilingual translations.

    **Features:**
    - Date-seeded movie selections (daily/weekly/monthly)
    - Comprehensive awards and nominations tracking
    - Multilingual movie title support
    - User-submitted article links
    - Admin management interface

    **Authentication:**
    - Public endpoints require no authentication
    - Admin endpoints require JWT Bearer token

    **Rate Limiting:**
    - Article link submissions: 10 per hour per IP
  version: 1.0.0
  contact:
    name: SHINE Movie Database
    url: https://shine-film.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.shine-film.com
    description: Production server

paths:
  /:
    get:
      summary: Get date-seeded movie selections
      description: Returns daily, weekly, and monthly movie selections using deterministic hash-based algorithms
      operationId: getMovieSelections
      tags:
        - Movies
      security: []
      parameters:
        - name: locale
          in: query
          description: Language preference for movie titles
          required: false
          schema:
            type: string
            enum: [en, ja]
            default: en
      responses:
        '200':
          description: Successfully retrieved movie selections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieSelections'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /movies/search:
    get:
      summary: Search movies
      description: Search and filter movies with pagination support
      operationId: searchMovies
      tags:
        - Movies
      security: []
      parameters:
        - name: q
          in: query
          description: Search query for movie titles
          required: false
          schema:
            type: string
            maxLength: 100
        - name: year
          in: query
          description: Filter by release year
          required: false
          schema:
            type: integer
            minimum: 1900
            maximum: 2100
        - name: language
          in: query
          description: Filter by original language
          required: false
          schema:
            type: string
            pattern: '^[a-z]{2}$'
        - name: hasAwards
          in: query
          description: Filter movies with awards/nominations
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Successfully retrieved search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieSearchResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /movies/{id}:
    get:
      summary: Get movie details
      description: Retrieve detailed information about a specific movie including translations, posters, and nominations
      operationId: getMovieById
      tags:
        - Movies
      security: []
      parameters:
        - name: id
          in: path
          description: Movie unique identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved movie details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDetails'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /movies/{id}/article-links:
    get:
      summary: Get movie article links
      description: Retrieve user-submitted article links for a specific movie (excluding spam-flagged items)
      operationId: getMovieArticleLinks
      tags:
        - Articles
      security: []
      parameters:
        - name: id
          in: path
          description: Movie unique identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved article links
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleLink'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Submit movie article link
      description: Submit a new article link for a movie (rate limited to 10 per hour per IP)
      operationId: submitMovieArticleLink
      tags:
        - Articles
      security: []
      parameters:
        - name: id
          in: path
          description: Movie unique identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleLinkSubmission'
      responses:
        '201':
          description: Article link successfully submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleLinkResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /movies/{id}/translations:
    post:
      summary: Add or update movie translation
      description: Add or update a movie title translation for a specific language
      operationId: addMovieTranslation
      tags:
        - Translations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Movie unique identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslationRequest'
      responses:
        '200':
          description: Translation successfully added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /movies/{id}/translations/{lang}:
    delete:
      summary: Delete movie translation
      description: Remove a movie title translation for a specific language
      operationId: deleteMovieTranslation
      tags:
        - Translations
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Movie unique identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: lang
          in: path
          description: Language code
          required: true
          schema:
            type: string
            pattern: '^[a-z]{2}$'
      responses:
        '200':
          description: Translation successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /fetch-url-title:
    post:
      summary: Extract title from URL
      description: Utility endpoint to extract page title from a given URL
      operationId: fetchUrlTitle
      tags:
        - Utilities
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  description: URL to extract title from
      responses:
        '200':
          description: Successfully extracted title
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Extracted page title
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      summary: Admin login
      description: Authenticate as admin and receive JWT token
      operationId: adminLogin
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  description: Admin password
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token (valid for 24 hours)
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/movies:
    get:
      summary: List all movies (admin)
      description: Retrieve paginated list of all movies with admin details
      operationId: adminListMovies
      tags:
        - Admin - Movies
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: search
          in: query
          description: Search query for movie titles
          required: false
          schema:
            type: string
            maxLength: 100
      responses:
        '200':
          description: Successfully retrieved movies list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminMoviesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/movies/{id}:
    delete:
      summary: Delete movie (admin)
      description: Delete a movie and all related data (cascading delete)
      operationId: adminDeleteMovie
      tags:
        - Admin - Movies
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Movie unique identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Movie successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/movies/{id}/imdb-id:
    put:
      summary: Update movie IMDb ID (admin)
      description: Update movie IMDb ID with optional TMDb data synchronization
      operationId: adminUpdateMovieImdbId
      tags:
        - Admin - Movies
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Movie unique identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImdbIdUpdateRequest'
      responses:
        '200':
          description: IMDb ID successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImdbIdUpdateResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/movies/{id}/tmdb-id:
    put:
      summary: Update movie TMDb ID (admin)
      description: Update movie TMDb ID with optional TMDb data synchronization
      operationId: adminUpdateMovieTmdbId
      tags:
        - Admin - Movies
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Movie unique identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TmdbIdUpdateRequest'
      responses:
        '200':
          description: TMDb ID successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TmdbIdUpdateResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/movies/{id}/posters:
    post:
      summary: Add movie poster (admin)
      description: Add a new poster for a movie
      operationId: adminAddMoviePoster
      tags:
        - Admin - Posters
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Movie unique identifier
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PosterAddRequest'
      responses:
        '201':
          description: Poster successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PosterResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/movies/{movieId}/posters/{posterId}:
    delete:
      summary: Delete movie poster (admin)
      description: Remove a poster from a movie
      operationId: adminDeleteMoviePoster
      tags:
        - Admin - Posters
      security:
        - BearerAuth: []
      parameters:
        - name: movieId
          in: path
          description: Movie unique identifier
          required: true
          schema:
            type: string
            format: uuid
        - name: posterId
          in: path
          description: Poster unique identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Poster successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/article-links/{id}/spam:
    post:
      summary: Flag article link as spam (admin)
      description: Mark an article link as spam to hide it from public view
      operationId: adminFlagArticleLinkSpam
      tags:
        - Admin - Articles
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Article link unique identifier
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Article link successfully flagged as spam
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reselect:
    post:
      summary: Force movie reselection (admin)
      description: Force regeneration of movie selection for a specific period
      operationId: adminForceReselection
      tags:
        - Admin - Selections
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReselectRequest'
      responses:
        '200':
          description: Movie selection successfully regenerated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReselectResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login endpoint

  schemas:
    Movie:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          description: Unique identifier for the movie
        year:
          type: integer
          minimum: 1900
          maximum: 2100
          description: Release year
        originalLanguage:
          type: string
          pattern: '^[a-z]{2}$'
          description: ISO 639-1 language code
        imdbId:
          type: string
          pattern: '^tt\d{7,8}$'
          nullable: true
          description: IMDb identifier (tt format)
        tmdbId:
          type: integer
          minimum: 1
          nullable: true
          description: TMDb identifier
        title:
          type: string
          description: Movie title (localized)
        posterUrl:
          type: string
          format: uri
          nullable: true
          description: Primary poster image URL
        imdbUrl:
          type: string
          format: uri
          nullable: true
          description: IMDb page URL
        hasAwards:
          type: boolean
          description: Whether the movie has awards or nominations
      required:
        - uid
        - year
        - originalLanguage
        - title

    MovieDetails:
      allOf:
        - $ref: '#/components/schemas/Movie'
        - type: object
          properties:
            posters:
              type: array
              items:
                $ref: '#/components/schemas/Poster'
              description: All poster images for the movie
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
              description: Movie title translations
            nominations:
              type: array
              items:
                $ref: '#/components/schemas/Nomination'
              description: Awards and nominations

    Poster:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          description: Unique identifier for the poster
        url:
          type: string
          format: uri
          description: Poster image URL
        width:
          type: integer
          minimum: 1
          nullable: true
          description: Image width in pixels
        height:
          type: integer
          minimum: 1
          nullable: true
          description: Image height in pixels
        languageCode:
          type: string
          pattern: '^[a-z]{2}$'
          nullable: true
          description: Language-specific poster
        sourceType:
          type: string
          enum: [tmdb, manual, scraper]
          description: Source of the poster
        isPrimary:
          type: boolean
          description: Whether this is the primary poster
      required:
        - uid
        - url
        - sourceType
        - isPrimary

    Translation:
      type: object
      properties:
        languageCode:
          type: string
          pattern: '^[a-z]{2}$'
          description: ISO 639-1 language code
        content:
          type: string
          description: Translated movie title
        isDefault:
          type: boolean
          description: Whether this is the default translation
      required:
        - languageCode
        - content
        - isDefault

    Nomination:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          description: Unique identifier for the nomination
        isWinner:
          type: boolean
          description: Whether this nomination won the award
        specialMention:
          type: string
          nullable: true
          description: Special mention or note about the nomination
        category:
          $ref: '#/components/schemas/AwardCategory'
        ceremony:
          $ref: '#/components/schemas/AwardCeremony'
        organization:
          $ref: '#/components/schemas/AwardOrganization'
      required:
        - uid
        - isWinner
        - category
        - ceremony
        - organization

    AwardCategory:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          description: Unique identifier for the category
        name:
          type: string
          description: Category name
      required:
        - uid
        - name

    AwardCeremony:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          description: Unique identifier for the ceremony
        number:
          type: integer
          minimum: 1
          description: Ceremony number (e.g., 95th Academy Awards)
        year:
          type: integer
          minimum: 1900
          maximum: 2100
          description: Ceremony year
      required:
        - uid
        - number
        - year

    AwardOrganization:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          description: Unique identifier for the organization
        name:
          type: string
          description: Organization full name
        shortName:
          type: string
          nullable: true
          description: Organization short name or abbreviation
      required:
        - uid
        - name

    ArticleLink:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          description: Unique identifier for the article link
        url:
          type: string
          format: uri
          description: Article URL
        title:
          type: string
          description: Article title
        description:
          type: string
          nullable: true
          description: Article description
        submittedAt:
          type: string
          format: date-time
          description: Submission timestamp
      required:
        - uid
        - url
        - title
        - submittedAt

    MovieSelections:
      type: object
      properties:
        daily:
          $ref: '#/components/schemas/MovieWithDetails'
        weekly:
          $ref: '#/components/schemas/MovieWithDetails'
        monthly:
          $ref: '#/components/schemas/MovieWithDetails'
      required:
        - daily
        - weekly
        - monthly

    MovieWithDetails:
      allOf:
        - $ref: '#/components/schemas/Movie'
        - type: object
          properties:
            nominations:
              type: array
              items:
                $ref: '#/components/schemas/Nomination'
              description: Awards and nominations
            articleLinks:
              type: array
              items:
                $ref: '#/components/schemas/ArticleLink'
              description: Related article links (max 3)

    MovieSearchResponse:
      type: object
      properties:
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
          description: Search results
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        filters:
          $ref: '#/components/schemas/SearchFilters'
      required:
        - movies
        - pagination
        - filters

    AdminMoviesResponse:
      type: object
      properties:
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
          description: Movies list
        pagination:
          $ref: '#/components/schemas/AdminPaginationInfo'
      required:
        - movies
        - pagination

    PaginationInfo:
      type: object
      properties:
        currentPage:
          type: integer
          minimum: 1
          description: Current page number
        totalPages:
          type: integer
          minimum: 1
          description: Total number of pages
        totalCount:
          type: integer
          minimum: 0
          description: Total number of items
        hasNextPage:
          type: boolean
          description: Whether there is a next page
        hasPrevPage:
          type: boolean
          description: Whether there is a previous page
      required:
        - currentPage
        - totalPages
        - totalCount
        - hasNextPage
        - hasPrevPage

    AdminPaginationInfo:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
        limit:
          type: integer
          minimum: 1
          description: Items per page limit
        totalCount:
          type: integer
          minimum: 0
          description: Total number of items
        totalPages:
          type: integer
          minimum: 1
          description: Total number of pages
      required:
        - page
        - limit
        - totalCount
        - totalPages

    SearchFilters:
      type: object
      properties:
        query:
          type: string
          nullable: true
          description: Applied search query
        year:
          type: integer
          nullable: true
          description: Applied year filter
        language:
          type: string
          nullable: true
          description: Applied language filter
        hasAwards:
          type: boolean
          nullable: true
          description: Applied awards filter

    ArticleLinkSubmission:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: Article URL
        title:
          type: string
          maxLength: 200
          description: Article title
        description:
          type: string
          maxLength: 500
          nullable: true
          description: Article description
      required:
        - url
        - title

    ArticleLinkResponse:
      allOf:
        - $ref: '#/components/schemas/ArticleLink'
        - type: object
          properties:
            movieUid:
              type: string
              format: uuid
              description: Associated movie identifier
            submitterIp:
              type: string
              description: Submitter IP address (admin only)

    TranslationRequest:
      type: object
      properties:
        languageCode:
          type: string
          pattern: '^[a-z]{2}$'
          description: ISO 639-1 language code
        content:
          type: string
          minLength: 1
          maxLength: 500
          description: Translated movie title
      required:
        - languageCode
        - content

    ImdbIdUpdateRequest:
      type: object
      properties:
        imdbId:
          type: string
          pattern: '^tt\d{7,8}$'
          description: IMDb identifier in tt format
        refreshData:
          type: boolean
          default: false
          description: Whether to fetch additional data from TMDb
      required:
        - imdbId

    ImdbIdUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Operation success status
        refreshResults:
          type: object
          nullable: true
          properties:
            tmdbId:
              type: integer
              nullable: true
              description: Auto-detected TMDb ID
            postersAdded:
              type: integer
              description: Number of posters added
            translationsAdded:
              type: integer
              description: Number of translations added
          description: Results of TMDb data refresh (if refreshData was true)
      required:
        - success

    TmdbIdUpdateRequest:
      type: object
      properties:
        tmdbId:
          type: integer
          minimum: 1
          description: TMDb identifier (positive integer)
        refreshData:
          type: boolean
          default: false
          description: Whether to fetch additional data from TMDb
      required:
        - tmdbId

    TmdbIdUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Operation success status
        refreshResults:
          type: object
          nullable: true
          properties:
            postersAdded:
              type: integer
              description: Number of posters added
            translationsAdded:
              type: integer
              description: Number of translations added
          description: Results of TMDb data refresh (if refreshData was true)
      required:
        - success

    PosterAddRequest:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: Poster image URL
        width:
          type: integer
          minimum: 1
          nullable: true
          description: Image width in pixels
        height:
          type: integer
          minimum: 1
          nullable: true
          description: Image height in pixels
        languageCode:
          type: string
          pattern: '^[a-z]{2}$'
          nullable: true
          description: Language-specific poster
        isPrimary:
          type: boolean
          default: false
          description: Whether this should be the primary poster
      required:
        - url

    PosterResponse:
      allOf:
        - $ref: '#/components/schemas/Poster'
        - type: object
          properties:
            movieUid:
              type: string
              format: uuid
              description: Associated movie identifier
            createdAt:
              type: integer
              description: Creation timestamp
            updatedAt:
              type: integer
              description: Last update timestamp

    ReselectRequest:
      type: object
      properties:
        type:
          type: string
          enum: [daily, weekly, monthly]
          description: Selection period type
        locale:
          type: string
          enum: [en, ja]
          default: en
          description: Language preference
      required:
        - type

    ReselectResponse:
      type: object
      properties:
        type:
          type: string
          description: Selection period type
        movie:
          $ref: '#/components/schemas/MovieWithDetails'
      required:
        - type
        - movie

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Operation success status
      required:
        - success

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          nullable: true
          description: Additional error details
      required:
        - error
        - code

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: 'Validation failed'
            code: 'VALIDATION_ERROR'
            details:
              field: 'Field validation message'

    UnauthorizedError:
      description: Authentication error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: 'Authentication required'
            code: 'AUTHENTICATION_ERROR'
            details:
              reason: 'MISSING_TOKEN'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: 'Resource not found'
            code: 'NOT_FOUND'

    ConflictError:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: 'Resource already exists'
            code: 'CONFLICT'

    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: 'Rate limit exceeded'
            code: 'RATE_LIMIT_EXCEEDED'
            details:
              retryAfter: 3600

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: 'Internal server error'
            code: 'INTERNAL_ERROR'

tags:
  - name: Movies
    description: Movie information and search operations
  - name: Articles
    description: User-submitted article links for movies
  - name: Translations
    description: Movie title translations management
  - name: Utilities
    description: Utility endpoints for common operations
  - name: Authentication
    description: Admin authentication endpoints
  - name: Admin - Movies
    description: Admin operations for movie management
  - name: Admin - Posters
    description: Admin operations for poster management
  - name: Admin - Articles
    description: Admin operations for article link management
  - name: Admin - Selections
    description: Admin operations for movie selection management
